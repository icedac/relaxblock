<structures>
└── relaxblock (16 files)
    ├── .gitignore (3 lines/0k bytes)
    ├── README.md (43 lines/2k bytes)
    ├── background.js (147 lines/4k bytes)
    ├── content.js (121 lines/4k bytes)
    ├── icons (2 files)
    │   ├── icon_128.png
    │   └── icon_128.svg (5 lines/0k bytes)
    ├── manifest.json (37 lines/1k bytes)
    ├── node_modules (0 files)
    ├── options.html (10 lines/0k bytes)
    ├── options.js (42 lines/2k bytes)
    ├── package.json (12 lines/0k bytes)
    ├── popup.html (20 lines/1k bytes)
    ├── popup.js (81 lines/3k bytes)
    ├── privacy.md (45 lines/2k bytes)
    ├── style.css (58 lines/1k bytes)
    └── test (2 files)
        ├── background.test.js (4 lines/0k bytes)
        └── content.test.js (5 lines/0k bytes)
</structures>

<file name=".gitignore">
node_modules/**
package-lock.json
.git/
</file>
<file name="README.md">
# RelaxBlock

## Introduction
RelaxBlock is a Chrome extension that allows you to:
1. **Block specific domains** so you can’t interact with them (pages are rendered in grayscale, all clicks and key events are blocked).
2. **Enter a “Relax Mode”** for a set duration (default 30 minutes), during which all blocked domains are temporarily accessible.
3. **Import/Export** the list of blocked domains.
4. **Block the current domain** in one click from the extension popup.

## Installation
1. Clone or download this repository.
2. Go to `chrome://extensions` in your Chrome browser.
3. Enable **Developer Mode** (top-right switch).
4. Click **Load unpacked** and select this folder.  

## Usage
1. Click the extension icon to open the popup.
2. **Start Relax Mode (30 min)**: Unblock all domains for 30 minutes.
3. **Stop Relax Mode**: Immediately end Relax Mode.  
4. **Block Current Domain**: Quickly add the domain of your active tab to the block list.  

## Development & Testing
1. Install dependencies:  
   ```bash
   npm install
   ```
2. Run tests:  
   ```bash
   npm run test
   ```
3. Load the unpacked extension in Chrome to test locally.

## Publishing to Chrome Web Store
1. Zip the entire directory.
2. Go to the [Chrome Web Store Developer Dashboard](https://chrome.google.com/webstore/devconsole).
3. Submit a new item, upload the zip, and fill in all required details (icons, screenshots, description, etc.).
4. Publish and wait for the review process to complete.

### Microsoft Edge Add-ons
1. [Microsoft Edge Add-ons 등록 페이지](https://partner.microsoft.com/en-us/dashboard/microsoftedge)
2. 비슷한 절차로 확장 프로그램 zip 압축 업로드
3. 아이콘, 스크린샷, 설명 등록 후 제출
</file>
<file name="background.js">
let relaxTimer = null
let contextInterval = null
let countdownInterval = null

chrome.runtime.onInstalled.addListener(()=>{
  initStorageIfEmpty()
  createContextMenu()
})
chrome.runtime.onStartup.addListener(()=>{
  initStorageIfEmpty()
  createContextMenu()
})

function initStorageIfEmpty(){
 chrome.storage.local.get(["blockedDomains","relaxModeUntil"],(res)=>{
  if(!Array.isArray(res.blockedDomains)) chrome.storage.local.set({blockedDomains:[]})
  if(!res.relaxModeUntil) chrome.storage.local.set({relaxModeUntil:0})
 })
}

function createContextMenu(){
 chrome.contextMenus.removeAll(()=>{
   chrome.contextMenus.create({
     id: "relaxMode",
     title: "릴랙스 모드",
     contexts: ["all"]
   })
 })
 // 기존에 interval 동작 중이면 정리
 if(contextInterval) clearInterval(contextInterval)
 // 새 interval 생성
 contextInterval = setInterval(updateContextMenu, 1000)
}

// 남은 시간 계산하여 Context Menu 제목 변경
function updateContextMenu(){
 chrome.storage.local.get("relaxModeUntil",(res)=>{
   let now = Date.now()
   let until = res.relaxModeUntil || 0
   let remain = Math.max(0, until - now)
   if(remain>0){
     let seconds = Math.floor(remain / 1000)
     let mm = String(Math.floor(seconds/60)).padStart(2,"0")
     let ss = String(seconds%60).padStart(2,"0")
     let title = `릴랙스 모드 (남은시간: ${mm}:${ss})`
     chrome.contextMenus.update("relaxMode",{title})
   } else {
     chrome.contextMenus.update("relaxMode",{title:"릴랙스 모드"})
   }
 })
}

chrome.runtime.onMessage.addListener((msg,sender,sendResponse)=>{
 if(msg.type==="START_RELAX"){
  let now=Date.now()
  let relaxDuration=msg.duration||30
  let until=now+relaxDuration*60000
  chrome.storage.local.set({relaxModeUntil:until})
  if(relaxTimer) clearTimeout(relaxTimer)
  relaxTimer=setTimeout(()=>{
    chrome.storage.local.set({relaxModeUntil:0})
  },relaxDuration*60000)
  startCountdown(relaxDuration*60)
  sendResponse({success:true})
 }
 else if(msg.type==="STOP_RELAX"){
  chrome.storage.local.set({relaxModeUntil:0})
  if(relaxTimer) clearTimeout(relaxTimer)
    startCountdown(0)
  sendResponse({success:true})
 }
 else if(msg.type==="GET_BLOCKED"){
  chrome.storage.local.get("blockedDomains",(res)=>{sendResponse({blocked:res.blockedDomains})})
  return true
 }
 else if(msg.type==="SET_BLOCKED"){
    chrome.storage.local.set({ blockedDomains: msg.blockedList }, () => {
        sendResponse({ success: true })
  
        // 1) Force re-check on all tabs
        chrome.tabs.query({}, (tabs) => {
          tabs.forEach(t => {
            chrome.tabs.sendMessage(t.id, { type: "FORCE_CHECK" })
          })
        })
      })
      return true
 }
 else if(msg.type==="OPEN_OPTIONS"){
  chrome.runtime.openOptionsPage()
  sendResponse({success:true})
 }
 return true
})

function startCountdown(durationSec){
    let remainSec = durationSec
    let blink = false
  
    // 혹시 기존 인터벌 있으면 제거
    if(countdownInterval) clearInterval(countdownInterval)
  
    // OffscreenCanvas (128x128)
    const canvas = new OffscreenCanvas(128, 128)
    const ctx = canvas.getContext('2d')
  
    countdownInterval = setInterval(() => {
      remainSec--
      blink = !blink
  
      // 남은 분 계산
      let remainMin = Math.floor(remainSec / 60)
      if(remainMin < 0) {
        // 예: 끝나면 아이콘 메시지 제거 or 초기 아이콘 복원
        chrome.action.setIcon({ path: "icons/icon_128.png" })
        clearInterval(countdownInterval)
        return
      }
  
      // 깜박이 표현 → 언더스코어(_)
      let textToShow = remainMin
  
      // 1) 배경 지우기
      ctx.clearRect(0,0,128,128)
  
      // 2) 배경색 or 원 그리기 (원하는대로)
      ctx.fillStyle = (blink ? "#333" : "#f00")
      ctx.beginPath()
      ctx.arc(64,64,60,0,2*Math.PI)
      ctx.fill()
  
      // 3) 남은 분 텍스트
      ctx.fillStyle = (blink ? "#fee" : "#0fc")
      ctx.font = "60px sans-serif"
      ctx.textAlign = "center"
      ctx.textBaseline = "middle"
      ctx.fillText(textToShow, 64, 64)
  
      // 4) 아이콘 업데이트
      chrome.action.setIcon({
        imageData: {
          "128": ctx.getImageData(0,0,128,128)
        }
      })
    }, 1000)
  }
</file>
<file name="content.js">
(function(){
    let blocked = false
    let relaxMode = false
    let blockOverlay = null
  
    // 도메인 재확인용 (기존 함수와 동일하거나 비슷)
    function recheckDomain() {
      let domain = location.hostname.replace("www.","")
      chrome.storage.local.get(["blockedDomains", "relaxModeUntil"], (res) => {
        let now = Date.now()
        let newRelaxMode = res.relaxModeUntil && now < res.relaxModeUntil
        let isBlocked = Array.isArray(res.blockedDomains) && res.blockedDomains.includes(domain) && !newRelaxMode
  
        if (isBlocked && !blocked) {
          blockPage()
        } else if (!isBlocked && blocked) {
          unblockPage()
        } else if (isBlocked && blocked) {
          // 이미 blocked 상태이지만,
          // 혹시 오버레이나 이벤트가 풀렸는지 다시 확인
          if(!blockOverlay || !document.body.contains(blockOverlay)){
            // 다시 blockPage() 호출
            blockPage()
          }
        }
      })
    }
  
    // 기존 blockPage
    function blockPage() {
      blocked = true
      document.documentElement.style.filter = "grayscale(100%)"
  
      // 혹시 기존에 리스너가 풀렸다면 다시 등록
      document.body.addEventListener("click", stopEvent, true)
      document.body.addEventListener("keydown", stopEvent, true)
      document.body.addEventListener("wheel", stopEvent, { capture: true, passive: false })
      document.body.addEventListener("mousedown", stopEvent, true)
      document.body.addEventListener("auxclick", stopEvent, true)
      window.addEventListener("popstate", stopEvent, true)
  
      // 오버레이 다시 만들거나 재할당
      if(blockOverlay) blockOverlay.remove()
      blockOverlay = document.createElement("div")
      blockOverlay.innerText = "This site is blocked. (Double-click to open options)"
      blockOverlay.style.position = "fixed"
      blockOverlay.style.top = "0"
      blockOverlay.style.left = "0"
      blockOverlay.style.width = "100%"
      blockOverlay.style.height = "100%"
      blockOverlay.style.display = "flex"
      blockOverlay.style.alignItems = "center"
      blockOverlay.style.justifyContent = "center"
      blockOverlay.style.fontSize = "24px"
      blockOverlay.style.backgroundColor = "rgba(0,0,0,0.3)"
      blockOverlay.style.color = "#fff"
      blockOverlay.style.textAlign = "center"
      blockOverlay.style.zIndex = "999999"
  
      blockOverlay.addEventListener("dblclick", (e) => {
        e.preventDefault()
        e.stopPropagation()
        chrome.runtime.sendMessage({type: "OPEN_OPTIONS"})
      }, true)
  
      document.body.appendChild(blockOverlay)
    }
  
    // 기존 unblockPage
    function unblockPage() {
      blocked = false
      document.documentElement.style.filter = ""
      document.body.removeEventListener("click", stopEvent, true)
      document.body.removeEventListener("keydown", stopEvent, true)
      document.body.removeEventListener("wheel", stopEvent, { capture: true })
      document.body.removeEventListener("mousedown", stopEvent, true)
      document.body.removeEventListener("auxclick", stopEvent, true)
      window.removeEventListener("popstate", stopEvent, true)
  
      if(blockOverlay){
        blockOverlay.remove()
        blockOverlay = null
      }
    }
  
    function stopEvent(e){
      e.stopPropagation()
      e.preventDefault()
    }
  
    // 처음 로딩 시점에 도메인 체크
    recheckDomain()
  
    // storage 변화 감지
    chrome.storage.onChanged.addListener((changes, namespace) => {
      if(changes.relaxModeUntil || changes.blockedDomains){
        recheckDomain()
      }
    })
  
    // ------------------------------
    // [추가 1] 페이지 로드 완료 시 재확인
    // ------------------------------
    window.addEventListener("load", () => {
      recheckDomain()
    })
  
    // ------------------------------
    // [추가 2] DOM 변경 감시 (MutationObserver)
    // ------------------------------
    let observer = new MutationObserver(() => {
      // DOM에 변화 발생 시 재확인
      recheckDomain()
    })
    observer.observe(document.documentElement, {
      childList: true,
      subtree: true,
    })
  
  })();
</file>
<file name="icons/icon_128.svg">
<svg width="128" height="128" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg">
  <circle cx="64" cy="64" r="60" fill="#000000" />
  <text x="50%" y="50%" fill="#ffffff" font-size="60" font-family="sans-serif" text-anchor="middle" alignment-baseline="central">RB</text>
</svg>
</file>
<file name="manifest.json">
{
    "name": "RelaxBlock",
    "version": "1.0.0",
    "manifest_version": 3,
    "description": "차단 도메인을 효율적으로 관리하고, 원하는 시간 동안 잠시 해제하는 기능을 제공.",
    "permissions": [
        "storage",
        "tabs",
        "activeTab",
        "scripting",
        "contextMenus" 
      ],
      "options_ui": {
      "page": "options.html",
      "open_in_tab": true
    },
    "action": {
        "default_icon": {
            "16": "icons/icon_128.png",
            "32": "icons/icon_128.png",
            "48": "icons/icon_128.png",
            "128": "icons/icon_128.png"
          },
          "default_popup": "popup.html"
    },
    "background": {
      "service_worker": "background.js"
    },
    "content_scripts": [
      {
        "matches": ["<all_urls>"],
        "js": ["content.js"],
        "run_at": "document_start"
      }
    ]
   }
</file>
<file name="options.html">
<!DOCTYPE html><html><head><meta charset="utf-8"><link rel="stylesheet" href="style.css"></head>
<body>
 <h1>차단 도메인 관리</h1>
 <input id="domainInput" type="text" placeholder="도메인 입력 (ex: example.com)">
 <button id="addBtn">추가</button>
 <ul id="blockedList"></ul>
 <button id="exportBtn">Export</button>
 <input id="importFile" type="file">
 <script src="options.js"></script>
</body></html>
</file>
<file name="options.js">
let domainInput=document.getElementById("domainInput")
let addBtn=document.getElementById("addBtn")
let blockedListEl=document.getElementById("blockedList")
let exportBtn=document.getElementById("exportBtn")
let importFile=document.getElementById("importFile")
function renderList(blocked){blockedListEl.innerHTML=""
 blocked.forEach((d,i)=>{let li=document.createElement("li")
  li.textContent=d
  li.onclick=()=>{blocked.splice(i,1);saveBlocked(blocked)}
  blockedListEl.appendChild(li)
 })}
function loadBlocked(){chrome.runtime.sendMessage({type:"GET_BLOCKED"},(res)=>{renderList(res.blocked)})}
function saveBlocked(blocked){chrome.runtime.sendMessage({type:"SET_BLOCKED",blockedList:blocked},()=>{renderList(blocked)})}
addBtn.onclick=()=>{let domain=domainInput.value.trim();if(domain){chrome.runtime.sendMessage({type:"GET_BLOCKED"},(res)=>{
  let newList=res.blocked
  if(!newList.includes(domain)) newList.push(domain)
  saveBlocked(newList)
  domainInput.value=""
 })}}
exportBtn.onclick=()=>{chrome.runtime.sendMessage({type:"GET_BLOCKED"},(res)=>{
 let data=JSON.stringify(res.blocked,null,2)
 let blob=new Blob([data],{type:"application/json"})
 let url=URL.createObjectURL(blob)
 let a=document.createElement("a")
 a.href=url
 a.download="blockedDomains.json"
 a.click()
 URL.revokeObjectURL(url)
})}
importFile.onchange=(e)=>{
 let file=e.target.files[0]
 if(!file)return
 let reader=new FileReader()
 reader.onload=function(event){
  try{let imported=JSON.parse(event.target.result)
   if(Array.isArray(imported)) saveBlocked(imported)
  }catch(err){}
 }
 reader.readAsText(file)
}
loadBlocked()
</file>
<file name="package.json">
{
    "name": "RelaxBlock",
    "version": "1.0.0",
    "scripts": {
      "test": "jest"
    },
    "devDependencies": {
      "@jest/globals": "^29.0.0",
      "jest": "^29.0.0"
    }
   }
</file>
<file name="popup.html">
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div id="popupContainer">
    <h1 id="extTitle">RelaxBlock</h1>
    <div id="buttonContainer">
      <button id="relaxBtn" class="monoBtn">Start Relax Mode (30 min)</button>
      <button id="blockCurrentSiteBtn" class="monoBtn">Block Current Domain - unknown</button>
    </div>
    <!-- If we want a separate space for the countdown, could do: -->
    <div id="countdownDisplay" class="digital-countdown"></div>
  </div>
  <script src="popup.js"></script>
</body>
</html>
</file>
<file name="popup.js">
let relaxBtn = document.getElementById("relaxBtn")
let blockCurrentSiteBtn = document.getElementById("blockCurrentSiteBtn")
let countdownDisplay = document.getElementById("countdownDisplay") // optional if we want a separate place

// Interval for countdown
let timerInterval = setInterval(updateRelaxUI, 1000)

function updateRelaxUI(){
  chrome.storage.local.get("relaxModeUntil", (res)=>{
    let until = res.relaxModeUntil || 0
    let now = Date.now()
    let remain = until - now
    if (remain > 0) {
      let seconds = Math.floor(remain / 1000)
      let mm = String(Math.floor(seconds / 60)).padStart(2, "0")
      let ss = String(seconds % 60).padStart(2, "0")
      relaxBtn.textContent = `Stop Relax Mode - ${mm}m ${ss}s left`
      if (countdownDisplay) {
        countdownDisplay.textContent = `${mm}:${ss}`
      }
    } else {
      relaxBtn.textContent = "Start Relax Mode (30 min)"
      if (countdownDisplay) {
        countdownDisplay.textContent = ""
      }
    }
  })
}

relaxBtn.onclick = () => {
  chrome.storage.local.get("relaxModeUntil", (res)=>{
    let until = res.relaxModeUntil || 0
    let now = Date.now()
    if (until > now) {
      // STOP
      chrome.runtime.sendMessage({type: "STOP_RELAX"}, ()=>{
        updateRelaxUI() 
      })
    } else {
      // START
      chrome.runtime.sendMessage({type: "START_RELAX", duration: 30}, ()=>{
        // immediate UI
        relaxBtn.textContent = "Stop Relax Mode - 30m 00s left"
        if (countdownDisplay) {
          countdownDisplay.textContent = "30:00"
        }
      })
    }
  })
}

// Block current domain
blockCurrentSiteBtn.onclick = () => {
  chrome.tabs.query({active:true, currentWindow:true}, (tabs)=>{
    if(!tabs || !tabs.length) return
    let currentUrl = tabs[0].url
    if(!currentUrl) return
    let domain = new URL(currentUrl).hostname.replace("www.","")

    chrome.runtime.sendMessage({type:"GET_BLOCKED"}, (res) => {
      let blockedList = res.blocked || []
      if(!blockedList.includes(domain)){
        blockedList.push(domain)
        chrome.runtime.sendMessage({type:"SET_BLOCKED", blockedList}, ()=>{
          alert(`"${domain}" has been added to the block list.`)
        })
      } else {
        alert(`"${domain}" is already in the block list.`)
      }
    })
  })
}

// Update "Block Current Domain" label
chrome.tabs.query({active:true, currentWindow:true}, (tabs)=>{
  if(tabs && tabs.length){
    let domain = new URL(tabs[0].url).hostname.replace("www.","")
    blockCurrentSiteBtn.textContent = `Block Current Domain - ${domain}`
  }
})
</file>
<file name="privacy.md">
# RelaxBlock Privacy Policy

**Last Updated: January 4, 2025**

RelaxBlock (hereinafter referred to as the "App") is committed to protecting your privacy. This Privacy Policy outlines how we handle your information, or rather, how we do not collect any personal information.

## 1. Information We Do Not Collect

**RelaxBlock does not collect any of the following personal information:**

- Name
- Email Address
- Phone Number
- Address
- Location Information
- Any other personally identifiable information

The App operates entirely on your device and does not transmit or store any personal information on our servers.

## 2. Information Sharing

**RelaxBlock does not share any user information with third parties.** We do not sell, trade, or rent any personal information to others without your consent.

## 3. Data Protection

Since RelaxBlock does not collect any personal information, there is no data to protect. We ensure that no personal data is stored or transmitted, maintaining your privacy by default.

## 4. Cookies and Tracking Technologies

RelaxBlock does not use cookies or any other tracking technologies. We do not monitor your browsing activities or online behavior.

## 5. External Links

The App may contain links to external websites. Please be aware that these external sites have their own privacy policies, which may differ from ours. We encourage you to review the privacy policies of any linked websites you visit.

## 6. Changes to This Privacy Policy

RelaxBlock may update this Privacy Policy from time to time. Any changes will be posted on this page, and the updated policy will take effect immediately upon posting. We encourage you to review this Privacy Policy periodically to stay informed about how we protect your privacy.

## 7. Contact Us

If you have any questions or concerns about this Privacy Policy, please contact us at:

- Email: zhugehyuk@gmail.com
</file>
<file name="style.css">
/* Global styling for the popup */
#popupContainer {
    width: 250px;
    min-height: 200px;
    background-color: #000; /* black */
    color: #fff; /* white text */
    font-family: "Courier New", monospace; /* mono style */
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  #extTitle {
    margin: 0;
    margin-bottom: 10px;
    font-size: 1.2em;
    text-align: center;
  }
  
  #buttonContainer {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 100%;
  }
  
  /* Monochrome button style */
  .monoBtn {
    background-color: #222;
    color: #fff;
    border: 1px solid #555;
    padding: 8px;
    font-family: "Courier New", monospace;
    font-size: 0.9em;
    cursor: pointer;
  }
  .monoBtn:hover {
    background-color: #fff;
    color: #000;
    border: 1px solid #222;
  }
  
  .digital-countdown {
    margin-top: 10px;
    font-size: 5.0em;
    letter-spacing: 0.05em;
  }
  
  /* Alternatively for more "digital" style, we could add extra styling:
  .digital-countdown {
    background-color: #333;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: bold;
  }
  */
</file>
<file name="test/background.test.js">
const {test,expect}=require('@jest/globals')
test("dummy background test",()=>{
 expect(true).toBe(true)
})
</file>
<file name="test/content.test.js">
const {test,expect}=require('@jest/globals')
test("dummy content test",()=>{
 expect(true).toBe(true)
})
</file>
